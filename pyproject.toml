[tool.poetry]
name = "cumplo-spotter"
version = "1.6.1"
description = "A simple yet powerful API for spotting secure and high-return Cumplo investment opportunities"
authors = ["Cristobal Sfeir <hello@cristobalsfeir.com>"]
packages = [{ include = "cumplo_spotter" }]

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.28.1"
arrow = "^1.2.3"
pydantic = "^2.1.1"
fastapi = "^0.109.1"
uvicorn = "^0.23.1"
gunicorn = "^21.2.0"
python-dotenv = "^1.0.0"
bs4 = "^0.0.1"
retry = "^0.9.2"
lxml = "^4.9.2"
google-cloud-logging = "^3.5.0"
httpx = "^0.26.0"
cumplo-common = { version = "^1.9.1", source = "cumplo-pypi" }
cachetools = "^5.5.0"

[tool.poetry.dev-dependencies]
mypy = "^1.13.0"
ruff = "^0.7.1"
docformatter = "^1.7.5"

[[tool.poetry.source]]
name = "cumplo-pypi"
url = "https://us-central1-python.pkg.dev/cumplo-scraper/cumplo-pypi/simple/"
priority = "supplemental"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
exclude = ".venv"

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "pydantic.*",
    "psycopg2.*",
    "lxml.*",
    "babel.*",
    "bs4.*",
    "functions_framework.*",
    "firebase_admin.*",
    "retry.*",
    "starlette.*",
    "cachetools.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py312"
preview = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in method
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "D100",    # Missing docstring in public module
    "D107",    # Missing docstring in __init__
    "D105",    # Missing docstring in magic method
    "D212",    # Multi-line docstring summary should start at the second line
    "D203",    # One blank line required before class docstring
    "D101",    # Missing docstring in public class
    "D104",    # Missing docstring in public package
    "G004",    # Logging statement uses string formatting
    "S113",    # Use of requests call without timeout
    "DOC201",  # Missing documentation for `return` in docstring
    "COM812",  # Missing trailing comma in a dictionary
    "ISC001",  # Implicit string concatenation
    "CPY001",  # Copying notice
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
docstring-code-format = false
docstring-code-line-length = 120

[tool.docformatter]
pre-summary-newline = true # Ensures that multiline docstrings start on a new line.
wrap-descriptions = 120    # Wraps descriptions at 114 characters, ensuring consistent line width.
wrap-summaries = 120       # Wraps summary lines only if they exceed 114 characters.
recursive = true           # Recursively formats all Python files in the specified directories.
blank = true               # Adds a blank line before the end of multiline docstrings.
